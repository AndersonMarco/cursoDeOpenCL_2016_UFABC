cmake_minimum_required(VERSION 3.4)
INCLUDE(${CMAKE_SOURCE_DIR}/CMakePostBuildCommands.cmake)


#set the name of file generated by build process as directory name== 
#where is "CMAKELists.txt".=========================================
STRING(REPLACE "/" ";"  transformCMAKE_CURRENT_SOURCE_DIRToAList ${CMAKE_CURRENT_SOURCE_DIR})
LIST(REVERSE transformCMAKE_CURRENT_SOURCE_DIRToAList)
LIST(GET transformCMAKE_CURRENT_SOURCE_DIRToAList 0 nameOfFileCompiled)
#end================================================================


#set the project name as a copy of the string stored in=============
#nameOfFileCompiled. The first char of name project is uppercase.===
STRING(LENGTH ${nameOfFileCompiled} lenOfNameOfFileCompiled)
MATH(EXPR lenOfNameOfFileCompiled "${lenOfNameOfFileCompiled}-1")
STRING(SUBSTRING ${nameOfFileCompiled} 1 ${lenOfNameOfFileCompiled} nameOfProject)
STRING(SUBSTRING ${nameOfFileCompiled} 0 1 firstCharOfNameOfProject)
STRING(TOUPPER  ${firstCharOfNameOfProject} firstCharOfNameOfProject)
SET( nameOfProject "${firstCharOfNameOfProject}${nameOfProject}")
#end================================================================


SET(CMAKE_USE_RELATIVE_PATH "false")
SET(BASEPATH "${CMAKE_SOURCE_DIR}") 
INCLUDE_DIRECTORIES("${BASEPATH} ")

SET(srcDir "src")
SET(srcDirOpencl "${srcDir}/openclCodes")
SET(outputFile ${nameOfFileCompiled})


PROJECT(${nameOfProject})

set(CMAKE_INCLUDE_CURRENT_DIR ON)
IF(Unix)
    FIND_PACKAGE(PythonInterp  REQUIRED)
ENDIF()


FIND_PACKAGE(OpenCL REQUIRED )
INCLUDE_DIRECTORIES(${OpenCL_INCLUDE_DIR})


# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)


INCLUDE_DIRECTORIES(${srcDir})
INCLUDE_DIRECTORIES("${srcDir}/whereami")


FILE(GLOB headers   RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${srcDir}/*.h"  "${srcDir}/whereami/*.h" )
FILE(GLOB sources   RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}  "${srcDir}/*.c"    "${srcDir}/whereami/*.c" )
FILE(GLOB openclFiles RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${srcDirOpencl}/*.cl")


ADD_EXECUTABLE(${nameOfProject}  ${headers} ${sources} ${openclFiles})
TARGET_LINK_LIBRARIES(${nameOfProject} ${OpenCL_LIBRARY})
SET_TARGET_PROPERTIES(${nameOfProject} PROPERTIES OUTPUT_NAME ${outputFile})
RUN_POST_BUILD_COMMANDS_DEFAULTS(${nameOfProject})
ADD_RESOURCES_DIRECTORIES_TO_DIRECTORY_OF_PROJECT_BUILT(${nameOfProject} ${srcDir} "openclCodes")


IF( CMAKE_COMPILER_IS_GNUCC )
    TARGET_LINK_LIBRARIES(${nameOfProject} -lm)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -O3)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -D_FILE_OFFSET_BITS=64)
ENDIF()


IF(${CMAKE_GENERATOR} STREQUAL "Unix Makefiles")
    SET(${ADDITIONAL_MAKE_CLEAN_FILES} "build")


    ADD_EXECUTABLE(debug EXCLUDE_FROM_ALL src/main.c ${headers} ${sources} ${openclFiles})
    TARGET_LINK_LIBRARIES(debug ${OpenCL_LIBRARY})
    SET_TARGET_PROPERTIES(debug PROPERTIES OUTPUT_NAME ${outputFile}_debug)
    IF( CMAKE_COMPILER_IS_GNUCC )
        TARGET_LINK_LIBRARIES(debug -lm)
        TARGET_COMPILE_OPTIONS(debug PRIVATE -D_FILE_OFFSET_BITS=64)
    ENDIF()
    TARGET_COMPILE_OPTIONS(debug PRIVATE -g)
    RUN_POST_BUILD_COMMANDS_DEFAULTS(debug)
    ADD_RESOURCES_DIRECTORIES_TO_DIRECTORY_OF_PROJECT_BUILT(debug ${srcDir} "openclCodes")
    SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES build)    
ENDIF()


IF(MSVC)
    SET(CMAKE_SUPPRESS_REGENERATION true)   
ENDIF()
