cmake_minimum_required(VERSION 3.4)
INCLUDE(${CMAKE_SOURCE_DIR}/CMakePostBuildCommands.cmake)


#set the name of file generated by build process as directory name== 
#where is "CMAKELists.txt".=========================================
STRING(REPLACE "/" ";"  transformCMAKE_CURRENT_SOURCE_DIRToAList ${CMAKE_CURRENT_SOURCE_DIR})
LIST(REVERSE transformCMAKE_CURRENT_SOURCE_DIRToAList)
LIST(GET transformCMAKE_CURRENT_SOURCE_DIRToAList 0 nameOfFileCompiled)
#end================================================================


#set the project name as a copy of the string stored in=============
#nameOfFileCompiled. The first char of name project is uppercase.===
STRING(LENGTH ${nameOfFileCompiled} lenOfNameOfFileCompiled)
MATH(EXPR lenOfNameOfFileCompiled "${lenOfNameOfFileCompiled}-1")
STRING(SUBSTRING ${nameOfFileCompiled} 1 ${lenOfNameOfFileCompiled} nameOfProject)
STRING(SUBSTRING ${nameOfFileCompiled} 0 1 firstCharOfNameOfProject)
STRING(TOUPPER  ${firstCharOfNameOfProject} firstCharOfNameOfProject)
SET( nameOfProject "${firstCharOfNameOfProject}${nameOfProject}")
#end================================================================


set(CMAKE_USE_RELATIVE_PATH "false")
SET(BASEPATH "${CMAKE_SOURCE_DIR}") 
INCLUDE_DIRECTORIES("${BASEPATH}")

SET(srcDir "src")
SET(srcDirOpencl "${srcDir}/openclCodes")
SET(srcDirShader "${srcDir}/shaders")
SET(outputFile ${nameOfFileCompiled})


PROJECT(${nameOfProject})


set(CMAKE_INCLUDE_CURRENT_DIR ON)
IF(Unix)
    FIND_PACKAGE(PythonInterp  REQUIRED )
ENDIF()


# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)


find_package(OpenGL REQUIRED)
IF(WIN32)
    SET(GLUT_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/artefacs/freeglut/include")            
    IF(${CMAKE_GENERATOR} MATCHES "Win64")        
        SET(GLUT_LIBRARY "${CMAKE_SOURCE_DIR}/artefacs/freeglut/lib/x64/freeglut.lib")           
    ELSE()
        SET(GLUT_LIBRARY "${CMAKE_SOURCE_DIR}/artefacs/freeglut/lib/freeglut.lib")           
    ENDIF()
ELSE()    
    find_package(GLUT REQUIRED)
ENDIF()
find_package(OpenCL REQUIRED)
IF(WIN32)
    IF(${CMAKE_GENERATOR} MATCHES "Win64")        
        SET(GLEW_LIBRARIES "${CMAKE_SOURCE_DIR}/artefacs/glew/lib/Release/x64/glew32.lib;${CMAKE_SOURCE_DIR}/artefacs/glew/lib/Release/x64/glew32s.lib" )
    ELSE()
        SET(GLEW_LIBRARIES "${CMAKE_SOURCE_DIR}/artefacs/glew/lib/Release/Win32/glew32.lib;${CMAKE_SOURCE_DIR}/artefacs/glew/lib/Release/Win32/glew32s.lib" )
    ENDIF()
    SET(GLEW_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/artefacs/glew/include")        
ELSE()
    find_package(GLEW REQUIRED)
ENDIF()
SET(GLM_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/artefacs/GLM/include")


INCLUDE_DIRECTORIES(${src} ${OpenCL_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIRS}  ${GLUT_INCLUDE_DIR} ${GLEW_INCLUDE_DIRS} ${GLM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES("${srcDir}/whereami")


FILE(GLOB headers   RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${srcDir}/*.hpp" "${srcDir}/*.h"  "${srcDir}/whereami/*.h" )
FILE(GLOB sources   RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}  "${srcDir}/*.cpp" "${srcDir}/*.c"    "${srcDir}/whereami/*.c" )
FILE(GLOB openclFiles RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${srcDirOpencl}/*.cl"  )
FILE(GLOB shaderFiles RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${srcDirShader}/*.glsl"  )


ADD_EXECUTABLE(${nameOfProject} src/main.cpp ${headers} ${sources} ${openclFiles} ${shaderFiles})
TARGET_LINK_LIBRARIES(${nameOfProject} ${OpenCL_LIBRARY}  ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES} ${GLUT_LIBRARY})
SET_TARGET_PROPERTIES(${nameOfProject} PROPERTIES OUTPUT_NAME ${outputFile})
RUN_POST_BUILD_COMMANDS_DEFAULTS(${nameOfProject})
ADD_RESOURCES_DIRECTORIES_TO_DIRECTORY_OF_PROJECT_BUILT(${nameOfProject} ${srcDir} "shaders" "openclCodes" "images" )


IF( CMAKE_COMPILER_IS_GNUCC )
    TARGET_LINK_LIBRARIES(${nameOfProject} -lm)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -O3)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -D_FILE_OFFSET_BITS=64)
ENDIF()


IF(${CMAKE_GENERATOR} STREQUAL "Unix Makefiles")
    SET(${ADDITIONAL_MAKE_CLEAN_FILES} "build")


    ADD_EXECUTABLE(debug EXCLUDE_FROM_ALL src/main.cpp ${headers} ${sources} ${openclFiles})
    TARGET_LINK_LIBRARIES(debug ${OpenCL_LIBRARY}  ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES} ${GLUT_LIBRARY})
    SET_TARGET_PROPERTIES(debug PROPERTIES OUTPUT_NAME ${outputFile}_debug)
    IF( CMAKE_COMPILER_IS_GNUCC )
        TARGET_LINK_LIBRARIES(debug -lm)
        TARGET_COMPILE_OPTIONS(debug PRIVATE -D_FILE_OFFSET_BITS=64)
    ENDIF()
    TARGET_COMPILE_OPTIONS(debug PRIVATE -g)
    RUN_POST_BUILD_COMMANDS_DEFAULTS(debug)
    ADD_RESOURCES_DIRECTORIES_TO_DIRECTORY_OF_PROJECT_BUILT(debug ${srcDir} "shaders" "openclCodes" "images" )
    SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES build)    
ENDIF()

 
IF(MSVC)
    SET(CMAKE_SUPPRESS_REGENERATION true)      
ENDIF()


IF(WIN32)
    IF(${CMAKE_GENERATOR} MATCHES "Win64")        
        ADD_RESOURCES_FILES_TO_DIRECTORY_OF_PROJECT_BUILT(${nameOfProject} "artefacs/freeglut/bin/" "x64/freeglut.dll")
        ADD_RESOURCES_FILES_TO_DIRECTORY_OF_PROJECT_BUILT(${nameOfProject} "artefacs/glew/bin/Release/" "x64/glew32.dll")
    ELSE()
        ADD_RESOURCES_FILES_TO_DIRECTORY_OF_PROJECT_BUILT(${nameOfProject} "artefacs/freeglut/bin/"  "freeglut.dll")
        ADD_RESOURCES_FILES_TO_DIRECTORY_OF_PROJECT_BUILT(${nameOfProject} "artefacs/glew/bin/Release/" "Win32/glew32.dll")        
    ENDIF()
ENDIF()  
