cmake_minimum_required(VERSION 3.4)
INCLUDE(${CMAKE_SOURCE_DIR}/CMakePostBuildCommands.cmake)
INCLUDE(${CMAKE_SOURCE_DIR}/CMakePostBuildCommandsForQt.cmake)


#set the name of file generated by build process as directory name== 
#where is "CMAKELists.txt".=========================================
STRING(REPLACE "/" ";"  transformCMAKE_CURRENT_SOURCE_DIRToAList ${CMAKE_CURRENT_SOURCE_DIR})
LIST(REVERSE transformCMAKE_CURRENT_SOURCE_DIRToAList)
LIST(GET transformCMAKE_CURRENT_SOURCE_DIRToAList 0 nameOfFileCompiled)
#end================================================================


#set the project name as a copy of the string stored in=============
#nameOfFileCompiled. The first char of name project is uppercase.===
STRING(LENGTH ${nameOfFileCompiled} lenOfNameOfFileCompiled)
MATH(EXPR lenOfNameOfFileCompiled "${lenOfNameOfFileCompiled}-1")
STRING(SUBSTRING ${nameOfFileCompiled} 1 ${lenOfNameOfFileCompiled} nameOfProject)
STRING(SUBSTRING ${nameOfFileCompiled} 0 1 firstCharOfNameOfProject)
STRING(TOUPPER  ${firstCharOfNameOfProject} firstCharOfNameOfProject)
SET( nameOfProject "${firstCharOfNameOfProject}${nameOfProject}")
#end================================================================


set(CMAKE_USE_RELATIVE_PATH "true")
SET(BASEPATH "${CMAKE_SOURCE_DIR}") 
INCLUDE_DIRECTORIES("${BASEPATH}")

SET(srcDir "src")
SET(outputFile ${nameOfProject})


PROJECT(${nameOfProject})

set(CMAKE_INCLUDE_CURRENT_DIR ON)
IF(Unix)
    FIND_PACKAGE(PythonInterp  REQUIRED )
ENDIF()





#===========================IMPORTANT===============================
#Because of QT is needed run the cmake for unix system at a
#direcory whithout simbolic link in your path.
#==============================END=================================


#config for QT5=====================================================
IF(MSVC)


    #uncomment the line  \"SET(useQTIn64bits "TRUE")\" and comment ====
    #the line SET(useQTIn64bits "FALSE") for  enable the use  of  qt===
    #libs for build of 64 bits in msvc=================================

    SET(useQTIn64bits "TRUE") 
    #SET(useQTIn64bits "FALSE")

    #end================================================================

    
    SET(QT5dir "C:\\Qt5\\5.2.1")
    IF(${useQTIn64bits})  
        SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "${QT5dir}\\msvc2012_64")
    ELSE()
        SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "${QT5dir}\\msvc2012")        
    ENDIF()
ENDIF()  
#end================================================================


# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)
# Find the QtWidgets library
find_package(Qt5Widgets)
find_package(Qt5OpenGL REQUIRED)
find_package(OpenGL REQUIRED)
find_package(Qt5 COMPONENTS Network  WebKitWidgets)



INCLUDE_DIRECTORIES(${src})


FILE(GLOB headers   RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${srcDir}/*.h" "${srcDir}/*.hpp"   )
FILE(GLOB sources   RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}  "${srcDir}/*.c" "${srcDir}/*.cpp" )


ADD_EXECUTABLE(${nameOfProject} src/main.cpp ${headers} ${sources})
qt5_use_modules(${nameOfProject} Widgets OpenGL Network  WebKitWidgets)
TARGET_LINK_LIBRARIES(${nameOfProject}  ${OPENGL_LIBRARIES} ${QT_LIBRARIES} )

SET_TARGET_PROPERTIES(${nameOfProject} PROPERTIES OUTPUT_NAME ${outputFile})
RUN_POST_BUILD_COMMANDS(${nameOfProject})


#config for QT5=====================================================
IF(MSVC)
    RUN_POST_BUILD_COMMANDS_FOR_QT_ON_MSVC(${nameOfProject} ${QT5dir} ${useQTIn64bits})
ENDIF()
IF(UNIX)
    RUN_POST_BUILD_COMMANDS_FOR_QT_ON_UNIX(${nameOfProject})
ENDIF()
#end================================================================


IF( CMAKE_COMPILER_IS_GNUCC )
    TARGET_LINK_LIBRARIES(${nameOfProject} -lm)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -O3)
    TARGET_COMPILE_OPTIONS(${nameOfProject} PRIVATE -D_FILE_OFFSET_BITS=64)
ENDIF()


IF(${CMAKE_GENERATOR} STREQUAL "Unix Makefiles")
    SET(${ADDITIONAL_MAKE_CLEAN_FILES} "build")


    ADD_EXECUTABLE(debug EXCLUDE_FROM_ALL src/main.cpp ${headers} ${sources} ${openclFiles})
    TARGET_LINK_LIBRARIES(debug ${OpenCL_LIBRARY} Qt5::Widgets  Qt5::WebKitWidgets)
    SET_TARGET_PROPERTIES(debug PROPERTIES OUTPUT_NAME ${outputFile}_debug)
    IF( CMAKE_COMPILER_IS_GNUCC )
        TARGET_LINK_LIBRARIES(debug -lm)
        TARGET_COMPILE_OPTIONS(debug PRIVATE -D_FILE_OFFSET_BITS=64)
    ENDIF()
    TARGET_COMPILE_OPTIONS(debug PRIVATE -g)
    RUN_POST_BUILD_COMMANDS(debug)
    SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES build)    
ENDIF()


IF(MSVC)
    SET(CMAKE_SUPPRESS_REGENERATION true)   
ENDIF()
  
